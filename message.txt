import axios from 'axios'
import { BaseLLM, ILLM, ILLMInput, LLMOutput } from '@flowiseai/core'
import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'

class ChatAPI_LLM extends BaseLLM implements INode {
    label: string
    name: string
    version: number
    type: string
    icon: string
    category: string
    description: string
    baseClasses: string[]
    inputs: INodeParams[]

    constructor() {
        super()
        this.label = 'ChatAPI'
        this.name = 'chatAPI'
        this.version = 1.0
        this.type = 'ChatAPI'
        this.icon = 'api.svg'
        this.category = 'Chat Models'
        this.description = 'Use any custom LLM via REST API (e.g., LocalAI, Ollama)'
        this.baseClasses = [this.type, 'BaseLLM']
        this.inputs = [
            {
                label: 'API Endpoint',
                name: 'apiEndpoint',
                type: 'string',
                placeholder: 'http://localhost:8080/v1/chat/completions'
            },
            {
                label: 'Model Name',
                name: 'modelName',
                type: 'string',
                placeholder: 'gpt4all'
            },
            {
                label: 'Temperature',
                name: 'temperature',
                type: 'number',
                step: 0.1,
                default: 0.7,
                optional: true
            },
            {
                label: 'Max Tokens',
                name: 'maxTokens',
                type: 'number',
                step: 1,
                optional: true
            },
            {
                label: 'Top P',
                name: 'topP',
                type: 'number',
                step: 0.1,
                optional: true
            },
            {
                label: 'API Key',
                name: 'apiKey',
                type: 'string',
                optional: true
            }
        ]
    }

    async callLLM(inputText: string, nodeData: INodeData, options: ICommonObject): Promise<LLMOutput> {
        const apiEndpoint = nodeData.inputs?.apiEndpoint as string
        const modelName = nodeData.inputs?.modelName as string
        const temperature = nodeData.inputs?.temperature as number || 0.7
        const maxTokens = nodeData.inputs?.maxTokens as number
        const topP = nodeData.inputs?.topP as number
        const apiKey = nodeData.inputs?.apiKey as string

        const headers: Record<string, string> = {
            'Content-Type': 'application/json'
        }
        if (apiKey) headers['Authorization'] = `Bearer ${apiKey}`

        const payload = {
            model: modelName,
            messages: [{ role: 'user', content: inputText }],
            temperature,
            ...(maxTokens && { max_tokens: maxTokens }),
            ...(topP && { top_p: topP })
        }

        try {
            const response = await axios.post(apiEndpoint, payload, { headers })
            const result = response.data?.choices?.[0]?.message?.content ?? ''
            return { text: result }
        } catch (error: any) {
            throw new Error(`API call failed: ${error.message}`)
        }
    }
}

module.exports = { nodeClass: ChatAPI_LLM }