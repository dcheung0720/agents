import { BaseCache } from '@langchain/core/caches'
import { CustomAPIInference } from './core' // adjust import path if needed
import { ICommonObject, INode, INodeData, INodeParams } from '../../../src/Interface'
import { getBaseClasses, getCredentialData, getCredentialParam } from '../../../src/utils'

class ChatCustomAPI_ChatModels implements INode {
    label: string
    name: string
    version: number
    type: string
    icon: string
    category: string
    description: string
    baseClasses: string[]
    credential: INodeParams
    inputs: INodeParams[]

    constructor() {
        this.label = 'ChatCustomAPI'
        this.name = 'chatCustomAPI'
        this.version = 1.0
        this.type = 'ChatCustomAPI'
        this.icon = 'customapi.svg'
        this.category = 'Chat Models'
        this.description = 'Chat model using a custom REST API endpoint'
        this.baseClasses = [this.type, 'BaseChatModel', ...getBaseClasses(CustomAPIInference)]
        this.credential = {
            label: 'API Key',
            name: 'credential',
            type: 'credential',
            credentialNames: ['customApi']
        }
        this.inputs = [
            {
                label: 'Endpoint URL',
                name: 'endpointUrl',
                type: 'string',
                placeholder: 'https://api.yourdomain.com/generate',
                description: 'Your custom LLM endpoint'
            },
            {
                label: 'Cache',
                name: 'cache',
                type: 'BaseCache',
                optional: true
            }
        ]
    }

    async init(nodeData: INodeData, _: string, options: ICommonObject): Promise<any> {
        const endpointUrl = nodeData.inputs?.endpointUrl as string
        const cache = nodeData.inputs?.cache as BaseCache

        const credentialData = await getCredentialData(nodeData.credential ?? '', options)
        const apiKey = getCredentialParam('customApiKey', credentialData, nodeData)

        const model = new CustomAPIInference({
            endpointUrl,
            apiKey
        })

        if (cache) model.cache = cache

        return model
    }
}

module.exports = { nodeClass: ChatCustomAPI_ChatModels }
